@using ChessApp.Data;
@using ChessApp.Features.Chess;
@using BlazorState;
@using ChessApp.Features.Mouse;
@inject IJSRuntime jsRuntime

@inherits BlazorStateComponent

<div @onmousemove="MouseMove" class="outer-box">
    <div oncontextmenu="return false;" class="inner-box @(isFlipped)">
        @for (char file = 'a'; file <= 'h'; file++)
        {
            @for (int rank = 1; rank <= 8; rank++)
            {
                <ChessSquare pos="new Position(file, rank)" >
                    
                </ChessSquare>
            }
        }

    </div>
</div>


@code {
    ChessState chessState => GetState<ChessState>();
    private Boolean isFlipped => chessState.IsFlipped;
    private Boolean mobile => chessState.Mobile;
    private Position mousePos => chessState.MovingPositon;
    private Coord mouseCoord = new Coord(0, 0);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Mediator.Send(new ChessState.IsMobileAction { Mobile = await jsRuntime.InvokeAsync<bool>("isDevice") });        
        }
    }
    async Task MouseMove(MouseEventArgs e)
    {
        if (mobile) return;

        if ((e.Buttons & 1) == 1) // If left mouse is down
        {
            mouseCoord.X = (int) e.PageX;
            mouseCoord.Y = (int ) e.PageY;

            await Mediator.Send(new MouseState.MoveMouseAction { MousePos = mouseCoord }); 
        } else
        {
            if (!mousePos.Equals(new Position('0', 0)))
            {
                await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = new Position('0', 0) });
            }
        }
    }
}
