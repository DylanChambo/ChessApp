@using ChessApp.Data;
@using BlazorState
@using ChessApp.Features.Chess;

@inherits BlazorStateComponent

<div @onmousedown="MouseDown" @onmouseup="MouseUp" @ontouchend="TouchUp" class="square @ChessState.GetSquareColour(pos)">
    <p class="file-letter">
        @if ((pos.Rank == 1 && !isFlipped) || (pos.Rank == 8 && isFlipped))
            {
                @pos.File
            }    
    </p>
    <p class="rank-num">
        @if ((pos.File == 'a' && !isFlipped) || (pos.File == 'h' && isFlipped))
            {
            @pos.Rank
            }
    </p>
    @if (piece != Piece.None)
    {
        
        if (pos.Equals(movingPiece)) 
        {
            if (mobile) // If mobile
            {
                moving = "selected";
            } else
            {
                moving = "moving";
            }
        } else
        {
            moving = "";
        }
        <img draggable="false" 
             class="piece @moving"
             src="images/@(piece).svg"
             style="top: calc(@(mousePos.Y - start.Y)px - 50%); left: calc(@(mousePos.X - start.X)px - 50%)" />
    }
    
    <div class="inv"></div>
    @if (possibleMoves.Contains(pos))
    {
        string empty = piece == Piece.None ? "empty" : "";
        <div class="move-circle @empty"></div>
    }
</div>

@code {
    [Parameter]
    public Position pos { get; set; }

    ChessState chessState => GetState<ChessState>();
    private Piece piece => chessState.GetPiece(pos.File, pos.Rank);
    private bool isFlipped => chessState.IsFlipped;
    public Coord mousePos => chessState.MousePos;
    public Position movingPiece => chessState.MovingPositon;
    public List<Position> possibleMoves => chessState.PiecePossibleMoves;
    public bool mobile => chessState.Mobile;

    public Coord start = new Coord(0, 0);
    public string moving = "";

    async Task MouseDown(MouseEventArgs e)
    {
        if (mobile) return;
        if (e.Button == 0) // If Left Click
        {
            // Set the Position In the state
            start.X = (int)(e.PageX - e.OffsetX);
            start.Y = (int) (e.PageY - e.OffsetY);
            await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = pos });
            await Mediator.Send(new ChessState.MoveMouseAction { MousePos = new Coord((int)e.PageX, (int)e.PageY) });
        }
    }

    async Task MouseUp(MouseEventArgs e)
    {
        if (mobile) return;
        if ((e.Buttons & 1) != 1) // If Left Not Left Clicking
        {
            // MovePiece with the Postion in the state and current
            if (!possibleMoves.Contains(pos))
            {
                await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = new Position('0', 0) });
                return;
            }
            if (pos.Equals(movingPiece) && !movingPiece.Equals(new Position('0', 0)))
            {
                await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = new Position('0',0) });
                return;
            }
            await Mediator.Send(new ChessState.MovePieceAction { NewPosition = pos, OldPosition = movingPiece });
        } 
    }

    async Task TouchUp(TouchEventArgs e)
    {
        if (!mobile) return;
        if (!movingPiece.Equals(new Position('0', 0)) && possibleMoves.Contains(pos))
        {
            await Mediator.Send(new ChessState.MovePieceAction { NewPosition = pos, OldPosition = movingPiece });
        } else
        {
            await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = pos });
        }

        
    }
}
