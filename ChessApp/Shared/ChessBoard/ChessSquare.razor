@using ChessApp.Data;
@using BlazorState
@using ChessApp.Features.Chess;
@using ChessApp.Features.Mouse;

@inherits BlazorStateComponent

<div @onmousedown="MouseDown" @onmouseup="MouseUp" @ontouchend="TouchUp" class="square @Chessboard.GetSquareColour(pos)">
    <p class="file-letter">
        @if ((pos.Rank == 1 && !isFlipped) || (pos.Rank == 8 && isFlipped))
            {
            @pos.File
        }    
    </p>
    <p class="rank-num">
        @if ((pos.File == 'a' && !isFlipped) || (pos.File == 'h' && isFlipped))
        {
            @pos.Rank
        }
    </p>
    @if (piece != Piece.None)
    {
        string Y = "0";
        string X = "0";
        if (pos.Equals(movingPiece) && !mobile && gameState == GameState.Playing)
        {
            Y = $"calc({mousePos.Y - start.Y}px - 50%)";
            X = $"calc({mousePos.X - start.X}px - 50%)";
            moving = "moving";
        } else
        {
            moving = "";
        }
        <img draggable="false" 
             class="piece @moving"
             src="images/@(piece).svg"
         style="top: @Y; left: @X;" />
    }

    <div class="inv"></div>
    @if (canMoveTo)
    {
        string empty = piece == Piece.None ? "empty" : "";
        <div class="move-circle @empty"></div>
    }
    @if (Selected())
    {
        <div class="selected @color"></div>
    }
</div>

@code {
    [Parameter]
    public Position pos { get; set; }

    ChessState chessState { 
        get {
            render = true;
            return GetState<ChessState>();
        }
    }

    private bool isFlipped => chessState.IsFlipped;
    public Position movingPiece => chessState.MovingPositon;
    public bool mobile => chessState.Mobile;
    public bool canMoveTo => chessState.Board.Moves.Contains(new Move(movingPiece, pos));
    private Piece piece => chessState.Board.GetPiece(pos.File, pos.Rank);
    public List<Move> moves => chessState.Board.Moves;
    public Move move => chessState.Board.Moves.First(m => m.Equals(new Move(movingPiece, pos)));
    public GameState gameState => chessState.Board.GameState;

    MouseState mouseState => GetState<MouseState>();
    public Coord mousePos => mouseState.MousePos;

    public Coord start = new Coord(0, 0);
    public string moving = "";
    public string color = "";
    public bool render = false;

    protected override bool ShouldRender()
    {   
        if (render)
        {
            render = false;
            return true;
        }
        if (movingPiece.Equals(pos))
        {
            return true;
        }
        return false;
    }

    async Task MouseDown(MouseEventArgs e)
    {
        if (mobile) return;
        if (e.Button == 0) // If Left Click
        {
            // Set the Position In the state
            start.X = (int)(e.PageX - e.OffsetX);
            start.Y = (int) (e.PageY - e.OffsetY);
            await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = pos });
            await Mediator.Send(new MouseState.MoveMouseAction { MousePos = new Coord((int)e.PageX, (int)e.PageY) });
        }
    }

    async Task MouseUp(MouseEventArgs e)
    {
        if (mobile) return;
        if ((e.Buttons & 1) != 1) // If Left Not Left Clicking
        {
            // MovePiece with the Postion in the state and current
            if (!canMoveTo)
            {
                await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = new Position('0', 0) });
                return;
            }
            if (pos.Equals(movingPiece) && !movingPiece.Equals(new Position('0', 0)))
            {
                await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = new Position('0',0) });
                return;
            }
            await Mediator.Send(new ChessState.MovePieceAction { Move = move });
        } 
    }

    async Task TouchUp(TouchEventArgs e)
    {
        if (!mobile) return;
        if (!movingPiece.Equals(new Position('0', 0)) && canMoveTo)
        {
            await Mediator.Send(new ChessState.MovePieceAction { Move = move });
        } else if (movingPiece.Equals(pos))
        {
            await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = new Position('0', 0) });

        } else
        {
            await Mediator.Send(new ChessState.MovingPieceAction { MovingPos = pos });
        }
    }

   

    public bool Selected()
    {
        if (movingPiece.Equals(pos) && gameState == GameState.Playing)
        {
            color = "";
            return true;
        } else if (gameState != GameState.Playing && MoveGenerator.IsKing(piece))
        {
            if (gameState == GameState.Draw)
            {
                color = "draw";
            }
            else if (gameState == GameState.BlackWin)
            {
                if (piece == Piece.WhiteKing)
                {
                    color = "lose";
                } else
                {
                    color = "win";
                }
            } else
            {
                if (piece == Piece.WhiteKing)
                {
                    color = "win";
                }
                else
                {
                    color = "lose";
                }
            }
            return true;
        }
        return false;
    }

    
}
