@using ChessApp.Data;
@using ChessApp.Data.Board;
@using Plk.Blazor.DragDrop;

 <div @onmousedown="MouseDown" @onmouseover="Print" @onmousemove="MouseMove" @onmouseup="MouseUp" class="square @Board.GetSquareColour(file, rank)">
    <p class="file-letter">
        @if ((rank == 1 && !board.isFlipped) || (rank == 8 && board.isFlipped))
            {
                @file
            }    
    </p>
    <p class="rank-num">
        @if ((file == 'a' && !board.isFlipped) || (file == 'h' && board.isFlipped))
            {
            @rank
            }
    </p>
    @if ( piece[0].piece != Piece.None)
    {
            <img draggable="false" class="piece" src="images/@(piece[0].piece).svg" />
    }
    @if (board.selected && board.movingPiece.file == file && board.movingPiece.rank == rank)
    {
        <img draggable="false" style="top: @(posY)px; left: @(posX)px" class="movingpiece" src="images/@(board.movingPiece.piece).svg" />
    }
</div>


    

@code {
    [Parameter]
    public EventCallback<bool> OnMove { get; set; }

    [Parameter]
    public char file { get; set; }

    [Parameter]
    public int rank { get; set; }

    [Parameter]
    public Board board { get; set; }

    [Parameter]
    public bool change { get; set; }

    public Piece sPiece;

    public int startX = 0;
    public int startY = 0;
    public int posX = 0;
    public int posY = 0;

    List<PieceInstance> piece;

    protected override void OnInitialized()
    {
    }
    protected override void OnParametersSet()
    {
        piece = new List<PieceInstance> { new PieceInstance(file, rank, board.GetPiece(file, rank)) };
    }

    public void OnDrop(PieceInstance p)
    {
        if (p.file == file && p.rank == rank) { return; }
        board.SetPiece(p.file, p.rank);
        board.SetPiece(file, rank, p.piece);
        OnMove.InvokeAsync(true);
        
    }

    public void MouseDown(MouseEventArgs e)
    {
        if (piece[0].piece == Piece.None)
        {
            return;
        }
        Console.WriteLine($"{file}{rank}");
        startX = (int)(e.PageX);
        startY = (int)(e.PageY);
        posX = 0;
        posY = 0;
        board.movingPiece = piece[0];
        sPiece = piece[0].piece;
        board.selected = true;
        piece = new List<PieceInstance> { new PieceInstance(file, rank, Piece.None) };
    }

    public void MouseUp(MouseEventArgs e)
    {
        board.selected = false;
    }

    public void MouseMove(MouseEventArgs e)
    {
        if (board.selected)
        {
            posX = (int) e.PageX - startX;
            posY = (int) e.PageY - startY;
        }
    }

    public void Print()
    {
        if (board.movingPiece.piece != Piece.None && !board.selected)
        {
            Console.WriteLine($"{file}{rank} {board.movingPiece.piece} {board.movingPiece.file}{board.movingPiece.rank}");
            board.SetPiece(board.movingPiece.file, board.movingPiece.rank);
            board.SetPiece(file, rank, board.movingPiece.piece);
            board.movingPiece.piece = Piece.None;
            OnMove.InvokeAsync(true);
            board.DisplayBoard();
        }
    }
}
