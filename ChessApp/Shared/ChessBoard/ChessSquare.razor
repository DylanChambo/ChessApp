@using ChessApp.Data;
@using BlazorState
@using ChessApp.Features.Chess;
@using ChessApp.Features.Device;
@using ChessApp.Features.Mouse;
@using ChessApp.Features.MovingPiece;
@using ChessApp.Scripts.Chess;

@inherits BlazorStateComponent
<div @onmousedown="MouseDown" @onmouseup="MouseUp" @ontouchend="TouchUp" class="square @GetSquareColour(file, rank)">
    <p class="file-letter">
        @if ((rank == 0 && !isFlipped) || (rank == 7 && isFlipped))
            {
            @(
                    (char)(file + 'a')
                    )
        }    
    </p>
    <p class="rank-num">
        @if ((file == 0 && !isFlipped) || (file == 7 && isFlipped))
        {
            @(
                    rank + 1
                    )
        }
    </p>
    @if (piece != Pieces.None)
    {
        string Y = "0";
        string X = "0";
        if (position == movingPosition && !mobile)
        {
            Y = $"calc({mousePos.Y - start.Y}px - 50%)";
            X = $"calc({mousePos.X - start.X}px - 50%)";
            moving = "moving";
        } else
        {
            moving = "";
        }
        <img draggable="false" 
             class="piece @moving"
             src="images/@(piece).svg"
         style="top: @Y; left: @X;" />
    }

    <div class="inv"></div>
    @if (canMoveTo)
    {
        string empty = piece == Pieces.None ? "empty" : "";
        <div class="move-circle @empty"></div>
    }
    @if (Selected())
    {
        <div class="selected @color"></div>
    }
</div>
@if (promotion)
{
    <Promotion side="@chessState.Board.Side" moves="@promotionMoves" OnMoveSelect="PromotionSelect"></Promotion>
}

@code {
    [Parameter]
    public int file { get; set; }

    [Parameter]
    public int rank { get; set; }

    public Position position => (Position)Conversion.ConvertFRTo120(file, rank);

    ChessState chessState => GetState<ChessState>();
    public Board board => chessState.Board;
    public GameState gameState => chessState.GameState;
    private bool isFlipped => chessState.IsFlipped;
    private Pieces piece => chessState.Board.Squares[Conversion.ConvertFRTo120(file, rank)];
    public List<int> moves => chessState.MoveList.GetMoves(chessState.Board, movingPosition, position);
    public List<int> promotionMoves = new List<int>();
    public bool canMoveTo => moves.Count() > 0;

    MovingPieceState movingPieceState => GetState<MovingPieceState>();
    public Position movingPosition => movingPieceState.Position;

    DeviceState deviceState => GetState<DeviceState>();
    public bool mobile => deviceState.Mobile;

    MouseState mouseState => GetState<MouseState>();
    public Coord mousePos => mouseState.MousePos;

    public Coord start = new Coord(0, 0);
    public string moving = "";
    public string color = "";
    public bool render = false;
    public bool promotion = false;

    async Task MouseDown(MouseEventArgs e)
    {
        if (mobile) return;
        //if (gameState != GameState.Playing) return;
        if (e.Button == 0) // If Left Click
        {
            if (piece == Pieces.None) { return; }
            // Set the Position In the state
            start.X = (int)(e.PageX - e.OffsetX);
            start.Y = (int)(e.PageY - e.OffsetY);
            await Mediator.Send(new MovingPieceState.MovingPieceAction(position));
            await Mediator.Send(new MouseState.MoveMouseAction { MousePos = new Coord((int)e.PageX, (int)e.PageY) });
        }
    }

    async Task MouseUp(MouseEventArgs e)
    {
        if (mobile) return;
        //if (gameState != GameState.Playing) return;
        if ((e.Buttons & 1) != 1) // If Left Not Left Clicking
        {
            // MovePiece with the Postion in the state and current
            if (!canMoveTo)
            {
                await Mediator.Send(new MovingPieceState.MovingPieceAction(0));
                return;
            }
            if (position == movingPosition)
            {
                await Mediator.Send(new MovingPieceState.MovingPieceAction(0));
                return;
            }
            await Move();
        }
    }

    async Task TouchUp(TouchEventArgs e)
    {
        if (!mobile) return;
        //if (gameState != GameState.Playing) return;
        if (movingPosition != 0 && canMoveTo)
        {
            await Move();
        }
        else if (movingPosition == position)
        {
            await Mediator.Send(new MovingPieceState.MovingPieceAction(0));

        } else
        {
            if (piece == Pieces.None) { return; }
            await Mediator.Send(new MovingPieceState.MovingPieceAction(position));
        }
    }

    async Task Move()
    {
        if (moves.Count() == 1)
        {
            await Mediator.Send(new ChessState.MovePieceAction(moves.FirstOrDefault()));
        }
        else
        {
            promotionMoves = moves;
            promotion = true;
        }
    }

    async Task PromotionSelect(int move)
    {
        promotion = false;
        if (move != -1)
        {
            await Mediator.Send(new ChessState.MovePieceAction(move));
        }
    }

    public bool Selected()
    {
        if ((movingPosition == position && gameState == GameState.Playing))
        {
            color = "";
            return true;
        }
        else if (position == chessState.lastMoveFrom || position == chessState.lastMoveTo)
        {
            color = "";
            return true;
        } 
        else if (gameState != GameState.Playing && Data.IsPieceKing[(int)piece])
        {
            if (gameState == GameState.None) { return false; }
            else if (gameState == GameState.Draw)
            {
                color = "draw";
            }
            else if (gameState == GameState.BlackWin)
            {
                if (piece == Pieces.WhiteKing)
                {
                    color = "lose";
                } else
                {
                    color = "win";
                }
            } else
            {
                if (piece == Pieces.WhiteKing)
                {
                    color = "win";
                }
                else
                {
                    color = "lose";
                }
            }
            return true;
        }
        return false;
    }

    public string GetSquareColour(int file, int rank)
    {
        if ((rank + file) % 2 == 0)
        {
            return "dark";
        }
        else
        {
            return "light";
        }
    }
}
